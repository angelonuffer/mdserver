#! /usr/bin/env python

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from argparse import ArgumentParser
import os

from markdown import markdown


class MDRequestHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        complete_path = os.path.join(MDRequestHandler.directory, self.path.strip("/"))
        if self.path == "/":
            self.send_response(200)
            self.send_header("Content-Type", "text/html; charset=utf-8")
            self.end_headers()
            self.wfile.write("<ul>")
            for document_path in all_markdown_documents("."):
                self.wfile.write("<li><a href=\"%s\">%s</a>" % (document_path.strip("./"), document_path))
            self.wfile.write("</ul>")
        if os.path.isfile(complete_path):
            self.send_response(200)
            self.send_header("Content-Type", "text/html; charset=utf-8")
            self.end_headers()
            self.wfile.write(markdown(open(complete_path).read()))


def all_markdown_documents(path):
    documents = list()
    for child in os.listdir(os.path.join(MDRequestHandler.directory, path)):
        if os.path.isdir(os.path.join(MDRequestHandler.directory, path, child)):
            documents.extend(all_markdown_documents(os.path.join(path, child)))
        if os.path.splitext(os.path.join(path, child))[1] == ".md":
            documents.append(os.path.join(path, child))
    return documents

def run():
    arguments_parser = ArgumentParser(description="Serve markdown files.")
    arguments_parser.add_argument("-d", "--dir", default=".", help="directory containing markdown files")
    arguments_parser.add_argument("-p", "--port", type=int, default=8000, help="directory containing markdown files")
    arguments = arguments_parser.parse_args()
    MDRequestHandler.directory = vars(arguments)["dir"]
    port = vars(arguments)["port"]
    httpd = HTTPServer(("", port), MDRequestHandler)
    httpd.serve_forever()

run()
